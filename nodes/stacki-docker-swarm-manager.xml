<?xml version="1.0" standalone="no"?>

<kickstart>


	<description>
	Your stacki-docker pallet description here
	</description>

	<si_copyright>
	(c) 2006 - 2016 StackIQ Inc.
	All rights reserved. stacki(r) v3.1 www.stacki.com
	</si_copyright>


<package cond="docker.swarm.manager">docker-swarm-demos</package>

<boot order="post" cond="docker.swarm.manager">
lcnuke=`echo &nukedisks; | tr '[:upper:]' '[:lower:]'`
if [ "${lcnuke}" = "true" ]; then 
/opt/stack/sbin/swarmtoken clear

/usr/bin/docker swarm init --advertise-addr &docker.swarm.manager_ip; &gt;&gt; /root/docker.status
WORK_TOKEN=`docker swarm join-token worker -q`
MGR_TOKEN=`docker swarm join-token manager -q`
echo ${MGR_TOKEN}
echo ${WORK_TOKEN}
/opt/stack/sbin/swarmtoken put worker $WORK_TOKEN
/opt/stack/sbin/swarmtoken put manager $MGR_TOKEN

else

TOKEN=`/opt/stack/sbin/swarmtoken get manager`
echo ${TOKEN}
/usr/bin/docker swarm join --token ${TOKEN} &docker.swarm.manager_ip;:2377 &gt;&gt; /root/docker.status
RES=$?

while [ $RES != 0 ]; do
        sleep 10
        TOKEN=`/opt/stack/sbin/swarmtoken get manager`
        /usr/bin/docker swarm join --token ${TOKEN} &docker.swarm.manager_ip;:2377 >> /root/docker.status
        RES=$?
done

fi
</boot>

<boot order="post" cond="docker.swarm.overlay_network">
lcnuke=`echo &nukedisks; | tr '[:upper:]' '[:lower:]'`
if [ "${lcnuke}" = "true" ]; then 
docker network create \
  --driver overlay \
  --subnet &docker.swarm.overlay_network; \
  --opt encrypted \
  &docker.swarm.overlay_network_name;
fi
</boot>


<boot order="post" cond="docker.swarm.demo">
lcnuke=`echo &nukedisks; | tr '[:upper:]' '[:lower:]'`
if [ "${lcnuke}" = "true" ]; then 

docker service create \
--mode global \
--mount type=bind,source=/,destination=/rootfs,ro=1 \
--mount type=bind,source=/var/run,destination=/var/run \
--mount type=bind,source=/sys,destination=/sys,ro=1 \
--mount type=bind,source=/var/lib/docker/,destination=/var/lib/docker,ro=1 \
--publish mode=host,target=8080,published=8080 \
--name=cadvisor \
google/cadvisor:latest

docker service create \
--replicas 3 \
--name="nginxweb" \
--network &docker.swarm.overlay_network_name; \
--publish 80:80 \
nginx
fi
</boot>

</kickstart>
